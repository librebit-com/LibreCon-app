package librecon;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import librecon.Txoko;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TXOKO.
*/
public class TxokoDao extends AbstractDao<Txoko, Long> {

    public static final String TABLENAME = "TXOKO";

    /**
     * Properties of entity Txoko.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TitleEs = new Property(1, String.class, "titleEs", false, "TITLE_ES");
        public final static Property TitleEu = new Property(2, String.class, "titleEu", false, "TITLE_EU");
        public final static Property TitleEn = new Property(3, String.class, "titleEn", false, "TITLE_EN");
        public final static Property TextEs = new Property(4, String.class, "textEs", false, "TEXT_ES");
        public final static Property TextEu = new Property(5, String.class, "textEu", false, "TEXT_EU");
        public final static Property TextEn = new Property(6, String.class, "textEn", false, "TEXT_EN");
        public final static Property PicUrl = new Property(7, String.class, "picUrl", false, "PIC_URL");
        public final static Property OrderField = new Property(8, Integer.class, "orderField", false, "ORDER_FIELD");
    }


    public TxokoDao(DaoConfig config) {
        super(config);
    }
    
    public TxokoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TXOKO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE_ES' TEXT," + // 1: titleEs
                "'TITLE_EU' TEXT," + // 2: titleEu
                "'TITLE_EN' TEXT," + // 3: titleEn
                "'TEXT_ES' TEXT," + // 4: textEs
                "'TEXT_EU' TEXT," + // 5: textEu
                "'TEXT_EN' TEXT," + // 6: textEn
                "'PIC_URL' TEXT," + // 7: picUrl
                "'ORDER_FIELD' INTEGER);"); // 8: orderField
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TXOKO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Txoko entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String titleEs = entity.getTitleEs();
        if (titleEs != null) {
            stmt.bindString(2, titleEs);
        }
 
        String titleEu = entity.getTitleEu();
        if (titleEu != null) {
            stmt.bindString(3, titleEu);
        }
 
        String titleEn = entity.getTitleEn();
        if (titleEn != null) {
            stmt.bindString(4, titleEn);
        }
 
        String textEs = entity.getTextEs();
        if (textEs != null) {
            stmt.bindString(5, textEs);
        }
 
        String textEu = entity.getTextEu();
        if (textEu != null) {
            stmt.bindString(6, textEu);
        }
 
        String textEn = entity.getTextEn();
        if (textEn != null) {
            stmt.bindString(7, textEn);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(8, picUrl);
        }
 
        Integer orderField = entity.getOrderField();
        if (orderField != null) {
            stmt.bindLong(9, orderField);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getLong(offset);
    }    

    /** @inheritdoc */
    @Override
    public Txoko readEntity(Cursor cursor, int offset) {
        return new Txoko( //
            cursor.isNull(offset) ? null : cursor.getLong(offset), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titleEs
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleEu
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titleEn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // textEs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // textEu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // textEn
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picUrl
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // orderField
        );
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Txoko entity, int offset) {
        entity.setId(cursor.isNull(offset) ? null : cursor.getLong(offset));
        entity.setTitleEs(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitleEu(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleEn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTextEs(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTextEu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTextEn(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderField(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Txoko entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Txoko entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package librecon;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import librecon.AssistantMeeting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ASSISTANT_MEETING.
*/
public class AssistantMeetingDao extends AbstractDao<AssistantMeeting, Long> {

    public static final String TABLENAME = "ASSISTANT_MEETING";

    /**
     * Properties of entity AssistantMeeting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AssistantId = new Property(1, Long.class, "assistantId", false, "ASSISTANT_ID");
        public final static Property MeetingId = new Property(2, Long.class, "meetingId", false, "MEETING_ID");
    }


    public AssistantMeetingDao(DaoConfig config) {
        super(config);
    }
    
    public AssistantMeetingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ASSISTANT_MEETING' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ASSISTANT_ID' INTEGER," + // 1: assistantId
                "'MEETING_ID' INTEGER);"); // 2: meetingId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ASSISTANT_MEETING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AssistantMeeting entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long assistantId = entity.getAssistantId();
        if (assistantId != null) {
            stmt.bindLong(2, assistantId);
        }
 
        Long meetingId = entity.getMeetingId();
        if (meetingId != null) {
            stmt.bindLong(3, meetingId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getLong(offset);
    }    

    /** @inheritdoc */
    @Override
    public AssistantMeeting readEntity(Cursor cursor, int offset) {
        return new AssistantMeeting( //
            cursor.isNull(offset) ? null : cursor.getLong(offset), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // assistantId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // meetingId
        );
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AssistantMeeting entity, int offset) {
        entity.setId(cursor.isNull(offset) ? null : cursor.getLong(offset));
        entity.setAssistantId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMeetingId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AssistantMeeting entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AssistantMeeting entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

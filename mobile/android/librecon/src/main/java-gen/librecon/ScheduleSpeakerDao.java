package librecon;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import librecon.ScheduleSpeaker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCHEDULE_SPEAKER.
*/
public class ScheduleSpeakerDao extends AbstractDao<ScheduleSpeaker, Long> {

    public static final String TABLENAME = "SCHEDULE_SPEAKER";

    /**
     * Properties of entity ScheduleSpeaker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SpeakerId = new Property(1, Long.class, "speakerId", false, "SPEAKER_ID");
        public final static Property ScheduleId = new Property(2, Long.class, "scheduleId", false, "SCHEDULE_ID");
    }


    public ScheduleSpeakerDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleSpeakerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCHEDULE_SPEAKER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SPEAKER_ID' INTEGER," + // 1: speakerId
                "'SCHEDULE_ID' INTEGER);"); // 2: scheduleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCHEDULE_SPEAKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScheduleSpeaker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long speakerId = entity.getSpeakerId();
        if (speakerId != null) {
            stmt.bindLong(2, speakerId);
        }
 
        Long scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindLong(3, scheduleId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getLong(offset);
    }    

    /** @inheritdoc */
    @Override
    public ScheduleSpeaker readEntity(Cursor cursor, int offset) {
        return new ScheduleSpeaker( //
            cursor.isNull(offset) ? null : cursor.getLong(offset), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // speakerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // scheduleId
        );
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScheduleSpeaker entity, int offset) {
        entity.setId(cursor.isNull(offset) ? null : cursor.getLong(offset));
        entity.setSpeakerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setScheduleId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScheduleSpeaker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScheduleSpeaker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
